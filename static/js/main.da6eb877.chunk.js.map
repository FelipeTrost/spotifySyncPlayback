{"version":3,"sources":["../node_modules/peerjs/dist sync","User.js","Host.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","useStyles","makeStyles","theme","card","width","maxWidth","root","display","details","flexDirection","cover","height","content","flex","selected","color","header","backgroundColor","User","props","useState","spotify","setSpotify","peerId","players","sellectedPlayer","userInfo","setUserInfo","userInfoRef","useRef","current","connection","setConnection","hostId","setHostId","connecting","host","setHost","hostSong","setHostSong","classes","useTheme","useEffect","a","s","Spotify","setAccessToken","credentials","access_token","getMe","catch","d","val","display_name","user","peer","Peer","secure","on","console","log","conn","close","getSpotifyDevices","v","devices","getMyDevices","then","length","className","body","Grow","in","AppBar","position","Toolbar","variant","Typography","title","Card","raised","CardContent","Skeleton","Button","onClick","component","TextField","label","value","onChange","target","InputProps","startAdornment","InputAdornment","connect","error","data","song","getMyCurrentPlaybackState","item","is_playing","progress_ms","device","timestamp","difference","uri","Math","abs","seek","pause","play","device_id","uris","position_ms","err","name","artists","Date","toISOString","substr","CardMedia","image","album","images","url","IconButton","List","map","player","index","ListItem","button","key","type","connectedClients","setConnectedClients","clientsRef","client","clients","list","interval","setInterval","Object","forEach","send","clearInterval","size","str","el","document","createElement","appendChild","select","execCommand","removeChild","copyToClipboard","App","status","setCredentials","setType","Host","clientId","redirectUri","scope","onSuccess","response","onFailure","buttonText","FormControl","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da6eb877.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 88;","import React, {useEffect, useState, useRef} from 'react';\r\nimport Peer from 'peerjs';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grow, List, ListItem, Button, AppBar, Toolbar, TextField, InputAdornment } from '@material-ui/core';\r\nimport {Skeleton} from '@material-ui/lab'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport DnsIcon from '@material-ui/icons/Dns';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card:{\r\n        width: '90%',\r\n        maxWidth: 600,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        width: '90%',\r\n        maxWidth: 500,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between'\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cover: {\r\n        width: 160,\r\n        height: 160,\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n    },\r\n    //For the list\r\n    selected:{\r\n        color: \"#1DB954\"\r\n    },\r\n    header:{\r\n        backgroundColor: \"#1DB954\"\r\n    },\r\n}));\r\n\r\nconst User = (props) => {\r\n    //spotify connectionnn\r\n    const [spotify,setSpotify] = useState(false);\r\n    \r\n    //user Stuff\r\n    const [userInfo, setUserInfo] =useState({peerId:null, spotify:null, players:[], sellectedPlayer:null });\r\n    const userInfoRef = useRef(userInfo);\r\n    userInfoRef.current = userInfo;\r\n    \r\n    //connection to PeerJS Broker\r\n    const [connection, setConnection] =useState(false);\r\n    //input for host s id\r\n    const [hostId, setHostId] = useState('');\r\n    //save the host object when connected\r\n    const [host, setHost] = useState({connecting:false, host:false});\r\n    //host playback status\r\n    const [hostSong, setHostSong] = useState(false);\r\n\r\n    //MATERIAL UI STYLE \r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        //async function for async stuff\r\n        ( async()=>{ \r\n        try {      \r\n            const s = new Spotify();\r\n            s.setAccessToken(props.credentials.access_token);\r\n            setSpotify(s);\r\n\r\n            //Get users sportify information\r\n            const user = await s.getMe()\r\n            .catch(d => setUserInfo( val =>{\r\n                return {...val, spotify: {display_name:'Not found'} }\r\n            } ));\r\n\r\n            setUserInfo( val =>{\r\n                return {...val, spotify : user}\r\n            } )\r\n\r\n            //Connect to broker server\r\n            const peer = new Peer({\r\n                host: \"9000-ac62c345-f733-4f21-9741-dc1e6d1fdc2d.ws-us02.gitpod.io\",\r\n                secure:true,\r\n            });\r\n           \r\n            //Called when we connect to broker server\r\n            peer.on('open', id =>{\r\n                console.log('connected to broker');\r\n                setUserInfo(val =>{\r\n                    return {...val, peerId:id}\r\n                });\r\n            });\r\n\r\n            //Reject incomming connections\r\n            peer.on('connection', conn => {\r\n                console.log(\"rejected\");\r\n                console.log(conn);\r\n                conn.close();\r\n            });\r\n\r\n        setConnection(peer);\r\n   \r\n        } catch (error) {\r\n            \r\n        }\r\n        })()\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        getSpotifyDevices()\r\n    }, [userInfo.spotify])\r\n\r\n    //Get all of the users available devices\r\n    const getSpotifyDevices = ()=>{\r\n        if(!spotify) return null;\r\n\r\n        //clear current devices for a visual effect\r\n        setUserInfo(v => {return {...v, devices:[]}})\r\n\r\n        spotify.getMyDevices()\r\n        .then(devices => setUserInfo(current => {\r\n            const sellectedPlayer = devices.devices.length !== 0 ? 0 : null;\r\n            return {...current, players: devices.devices, sellectedPlayer}\r\n        }))\r\n       .catch(e => console.log(\"Hubo un error:\", e))\r\n    }\r\n\r\n    //Connect and setup connection with host\r\n    const connect = () => {\r\n        setHost({connecting:true, host:false})\r\n\r\n        const conn = connection.connect(hostId,console.error);\r\n    \r\n        conn.on('open', function() {\r\n            console.log('Connected to another peer!!')\r\n            \r\n            setHost({connecting:false, host:conn});\r\n\r\n            conn.on('data', async (data) => {\r\n                const user = userInfoRef.current;\r\n                //console.log('Received', data.song);\r\n\r\n                setHostSong(data.song);\r\n\r\n                if(user.players.length === 0) return null;\r\n\r\n                const {item, is_playing, progress_ms, device, timestamp } = await spotify.getMyCurrentPlaybackState()\r\n\r\n                const difference = timestamp - data.song.timestamp\r\n                \r\n                if(item.uri === data.song.item.uri && device.id === user.players[user.sellectedPlayer]){\r\n                    //if Songs are more than 3 seconds appart we seek to the hosts position\r\n                    if(Math.abs((data.song.progress_ms+difference) - progress_ms) > 3*1000)\r\n                        spotify.seek(data.song.progress_ms+difference);\r\n\r\n                    if(data.song.is_playing !== is_playing && is_playing)\r\n                        spotify.pause(user.players[user.sellectedPlayer].id);\r\n                    \r\n                    if(data.song.is_playing !== is_playing && !is_playing)\r\n                        spotify.play({  device_id: user.players[user.sellectedPlayer]  })\r\n\r\n                    return null;\r\n                }\r\n\r\n                spotify.play({\r\n                    device_id:user.players[user.sellectedPlayer].id, \r\n                    uris:[data.song.item.uri],\r\n                    position_ms: progress_ms+difference,\r\n                });     \r\n            });\r\n        });\r\n        conn.on('close', ()=>{\r\n            setHost({connecting:false, host:false});\r\n        })\r\n        conn.on('error', err=>{\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    const disconnect = ()=>{\r\n        host.host.close()\r\n        setHostSong(false)\r\n    }\r\n\r\n    if(userInfo.spotify && userInfo.peerId && spotify && userInfo.players)\r\n    return (\r\n    <div className=\"App\" className={classes.body}>\r\n        \r\n        <Grow in={true}>\r\n        <AppBar position=\"static\" className={classes.header}> \r\n            <Toolbar variant=\"dense\">\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                {userInfo.spotify.display_name}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </Grow>\r\n\r\n        <br/>\r\n        <Grow in={true}>\r\n        <Card raised={true} className={classes.card}>\r\n            <CardContent>\r\n                {host.connecting? (\r\n                    <>\r\n                    <Skeleton variant=\"text\" width={410} />\r\n                    <Skeleton variant=\"rect\" width={410} height={50} />\r\n                    <Skeleton variant=\"text\" width={410} />\r\n                    </>\r\n                ):\r\n                \r\n                !host.host?\r\n                (<>\r\n                    <Typography variant=\"h6\" component=\"h6\">\r\n                        Connect\r\n                    </Typography>\r\n                    <br/>\r\n                    <TextField\r\n                        label=\"Id del host\"\r\n                        value={hostId} \r\n                        onChange={e => setHostId(e.target.value) }\r\n                        InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <DnsIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                        }}\r\n                    /> \r\n                    <br/><br/>\r\n                    <Button onClick={connect} > Connect </Button>\r\n                </>\r\n                ):(\r\n                    <>\r\n                    <Typography>Connected to: {host.host.peer}</Typography> <br/>\r\n                    <Button onClick={disconnect} variant=\"outlined\" color=\"secondary\">\r\n                        disconnect\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n        </Grow>\r\n        <br/>\r\n        {hostSong && (\r\n            <Grow in={true}>\r\n            <Card raised={true} className={classes.root}>\r\n                <div className={classes.details}>\r\n                    <CardContent className={classes.content}>\r\n                    <Typography component=\"h5\" variant=\"h5\">\r\n                        {hostSong.item.name}                    \r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        {hostSong.item.artists[0].name}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                        {new Date(hostSong.progress_ms).toISOString().substr(15,4)}\r\n                    </Typography>\r\n\r\n                    </CardContent>\r\n                </div>\r\n                <CardMedia\r\n                    className={classes.cover}\r\n                    image={hostSong.item.album.images[1].url}\r\n                    title=\"Live from space album cover\"\r\n                    component=\"img\"\r\n                />\r\n            </Card>\r\n            </Grow>  \r\n        )}\r\n        <br/>\r\n        <Grow in={true}>\r\n        <Card raised={true} className={classes.card}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    Players \r\n                    <IconButton onClick={getSpotifyDevices}>\r\n                        <RefreshIcon/>\r\n                    </IconButton>\r\n                </Typography>\r\n\r\n                {userInfo.players.length === 0 && (<h4>No connected devices {userInfo.sellectedPlayer} </h4>)}\r\n                <List maxWidth='md'>\r\n                    {userInfo.players.map((player, index) => (\r\n                        <ListItem button\r\n                            key={player.id} \r\n                            className={userInfo.sellectedPlayer == index? classes.selected:\"\"} \r\n                            onClick={()=>setUserInfo(current => {\r\n                                return {...current, sellectedPlayer:index}\r\n                            })}\r\n                        > \r\n                        <Typography> {player.name} type:{player.type}</Typography>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </CardContent>\r\n        </Card>\r\n        </Grow>\r\n\r\n    </div>\r\n    );\r\n    return (\r\n        <>\r\n        <Skeleton variant=\"text\" width={410} />\r\n        <Skeleton variant=\"text\" width={410} />\r\n        <Skeleton variant=\"rect\" width={410} height={118} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {useEffect, useState, useRef} from 'react';\r\nimport Peer from 'peerjs';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { List, ListItem, AppBar, Toolbar, Grow } from '@material-ui/core';\r\nimport {Skeleton} from '@material-ui/lab'\r\nimport DnsIcon from '@material-ui/icons/Dns';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card:{\r\n        width: '90%',\r\n        maxWidth: 600,\r\n    },\r\n    header:{\r\n        backgroundColor: \"#1DB954\"\r\n    },\r\n}));\r\n\r\nconst copyToClipboard = str => {\r\n    const el = document.createElement('textarea');\r\n    el.value = str;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n  };\r\n\r\nfunction User(props) {\r\n    //MATERIAL UI STYLE \r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const [spotify,setSpotify] = useState(false);\r\n\r\n    const [connection, setConnection] =useState(false);\r\n    const [userInfo, setUserInfo] =useState({peerId:null, spotify:null, players:[]});\r\n    \r\n    const [connectedClients, setConnectedClients] = useState({});\r\n    const clientsRef = useRef(connectedClients);\r\n    clientsRef.current = connectedClients;\r\n    const addClient = client => setConnectedClients(list => {\r\n        console.log(\"adding\",client);\r\n        return { ...list, [client.peer]:client };\r\n    });\r\n\r\n    useEffect(() => {\r\n        const s = new Spotify();\r\n        s.setAccessToken(props.credentials.access_token);\r\n        setSpotify(s);\r\n\r\n        //Get users sportify information\r\n        s.getMe()\r\n        .then(d => setUserInfo( val =>{\r\n            return {...val, spotify : d}\r\n        } ))\r\n        .catch(d => setUserInfo( val =>{\r\n            return {...val, spotify: {display_name:'Not found'} }\r\n        } ));\r\n\r\n        //Connect to broker server\r\n        const peer = new Peer({\r\n            host: \"9000-ac62c345-f733-4f21-9741-dc1e6d1fdc2d.ws-us02.gitpod.io\",\r\n            secure:true,\r\n        });\r\n\r\n        //Called when we connect to broker server\r\n        peer.on('open', id =>{\r\n            console.log('connected');\r\n            setUserInfo(val =>{\r\n                return {...val, peerId:id}\r\n            });\r\n        });\r\n\r\n        //Save incomming connections\r\n        peer.on('connection', conn => {\r\n            console.log(\"Peer connected:\", conn.peer);\r\n\r\n            conn.on('close', () => {\r\n                console.log(\"peer disconnected\");\r\n\r\n                setConnectedClients(clients =>{\r\n                    const {[conn.peer]: removedState, ...newClients} = clients;\r\n                    return newClients;\r\n                })\r\n            });\r\n            addClient(conn);\r\n        } );\r\n\r\n        setConnection(peer);\r\n\r\n        const interval = setInterval( async () => {\r\n\r\n            //If there arent users connected we dont need to do this\r\n            if(Object.keys(clientsRef.current).length < 1)\r\n                return null\r\n                \r\n            const data = await s.getMyCurrentPlaybackState()\r\n            if(!data) return null;\r\n            \r\n            Object.keys(clientsRef.current).forEach(id => {\r\n                console.log(clientsRef.current[id].send )\r\n                clientsRef.current[id].send({song: data}) \r\n            })     \r\n\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    if(userInfo.spotify && spotify && userInfo.players && userInfo.peerId)\r\n    return (\r\n    <div className=\"App\">\r\n        <Grow in={true}>\r\n            <AppBar position=\"static\" className={classes.header}> \r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {userInfo.spotify.display_name}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Grow>\r\n        <br/>\r\n        <Grow in={true}>\r\n        <Card raised={true} className={classes.card}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    <DnsIcon size=\"large\"/>\r\n                    Host id\r\n                </Typography>\r\n                <Typography>\r\n                    {userInfo.peerId} \r\n                    <IconButton onClick={() => copyToClipboard(userInfo.peerId)}>\r\n                        <FileCopyIcon/>\r\n                    </IconButton>\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        </Grow>\r\n        <br/>\r\n        <Grow in={true}>\r\n        <Card raised={true} className={classes.card}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    Connected Clients:\r\n                </Typography>\r\n\r\n                <List maxWidth='md'>\r\n                    {Object.keys(connectedClients).map(id =>  (\r\n                        <ListItem key={id} > \r\n                            <Typography> {id}</Typography>\r\n                        </ListItem>\r\n                    ))}\r\n                    {userInfo.players.map((player, index) => (\r\n                        <ListItem button\r\n                        key={player.id} \r\n                        className={userInfo.sellectedPlayer == index? classes.selected:\"\"} \r\n                        onClick={()=>setUserInfo(current => {\r\n                            return {...current, sellectedPlayer:index}\r\n                        })}\r\n                        > \r\n                        <Typography> {player.name} type:{player.type}</Typography>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </CardContent>\r\n        </Card>\r\n        </Grow>\r\n\r\n    </div>\r\n    );\r\n    else\r\n    return (\r\n        <>\r\n        <Skeleton variant=\"text\" width={410} />\r\n        <Skeleton variant=\"text\" width={410} />\r\n        <Skeleton variant=\"rect\" width={410} height={118} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default User;\r\n","import React, {useState} from 'react';\r\nimport User from './User.js';\r\nimport Host from './Host';\r\n\r\nimport SpotifyLogin from 'react-spotify-login';\r\nimport { Grow, Fade } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nfunction App() {\r\n    const [credentials, setCredentials] = useState({status:false, credentials:null});\r\n\r\n    const [type, setType] = useState(\"user\");\r\n\r\n    const onSuccess = response => setCredentials({status:true, credentials:response});\r\n    const onFailure = response => setCredentials({status:false, credentials:false});    \r\n    //\"streaming,user-read-email,user-read-private,read-playback-state\"\r\n\r\n    if(!credentials.status)\r\n        return (\r\n            <>\r\n            <Grow in={true}>\r\n              <div>\r\n              <SpotifyLogin clientId={'eff635f26c1c4116bc9cecca8ea22d17'}\r\n                redirectUri={'https://felipetrost.github.io/spotifySyncPlayback/'}\r\n                scope={[\"streaming\", \"user-read-email\", \"user-read-private\", \"user-read-playback-state\", \"user-modify-playback-state\"]}\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                buttonText={<Button type=\"submit\" variant=\"outlined\" color=\"primary\" >\r\n                  Entrar con spotify\r\n              </Button>}\r\n              />\r\n              </div>\r\n            </Grow>\r\n            <br/><br/>\r\n              <div>\r\n                <FormControl component=\"fieldset\" >\r\n                  <Grow in={true}><FormLabel component=\"legend\">Modalidad:</FormLabel></Grow>\r\n\r\n                  <Grow in={true}>\r\n                    <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={type} onChange={e => setType(e.target.value)}>\r\n                      <FormControlLabel value=\"host\" control={<Radio />} label=\"Host\" />\r\n                      <FormControlLabel value=\"user\" control={<Radio />} label=\"User\" />\r\n                    </RadioGroup>\r\n                  </Grow>\r\n                </FormControl>\r\n              </div>\r\n            {credentials.credentials === false && (\r\n              <h4>Hubo un problema con el inicio de sesion</h4>\r\n            )}\r\n            </>\r\n        )\r\n\r\n    else if(credentials.status){\r\n      if(type === \"host\")\r\n        return <Host credentials={credentials.credentials} />;\r\n\r\n      return <User credentials={credentials.credentials} />;\r\n      \r\n    }\r\n\r\n    else\r\n        return \"No se pudo\"\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}