{"version":3,"sources":["../node_modules/peerjs/dist sync","User.js","Host.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","User","props","useState","spotify","setSpotify","connection","setConnection","peerId","players","sellectedPlayer","userInfo","setUserInfo","userInfoRef","useRef","current","hostId","setHostId","host","setHost","hostSong","setHostSong","useEffect","a","s","Spotify","setAccessToken","credentials","access_token","getMe","then","d","val","catch","display_name","peer","Peer","on","console","log","conn","close","className","value","onChange","target","onClick","connect","data","user","song","length","getMyCurrentPlaybackState","item","is_playing","progress_ms","device","uri","Math","abs","seek","pause","play","device_id","uris","position_ms","name","v","devices","getMyDevices","map","player","key","type","connectedClients","setConnectedClients","clientsRef","client","clients","list","interval","setInterval","Object","forEach","send","clearInterval","App","status","setCredentials","isHost","setIsHost","Host","StrictMode","clientId","redirectUri","scope","onSuccess","response","onFailure","checked","for","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9b99395.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 19;","import React, {useEffect, useState, useRef} from 'react';\r\nimport Peer from 'peerjs';\r\nimport Spotify from 'spotify-web-api-js';\r\n\r\n\r\nfunction User(props) {\r\n    const [spotify,setSpotify] = useState(false);\r\n\r\n    const [connection, setConnection] =useState(false);\r\n    const [userInfo, setUserInfo] =useState({peerId:null, spotify:null, players:[], sellectedPlayer:null });\r\n    const userInfoRef = useRef(userInfo);\r\n    userInfoRef.current = userInfo;\r\n    \r\n    //input for host id\r\n    const [hostId, setHostId] = useState('');\r\n    //save the host object when connected\r\n    const [host, setHost] = useState(false);\r\n    //host playback status\r\n    const [hostSong, setHostSong] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        //async function for async stuff\r\n        ( async()=>{ \r\n\r\n        const s = new Spotify();\r\n        s.setAccessToken(props.credentials.access_token);\r\n        setSpotify(s);\r\n\r\n        //Get users sportify information\r\n        s.getMe()\r\n        .then(d => setUserInfo( val =>{\r\n            return {...val, spotify : d}\r\n        } ))\r\n        .catch(d => setUserInfo( val =>{\r\n            return {...val, spotify: {display_name:'Not found'} }\r\n        } ));\r\n\r\n\r\n        //Connect to broker server\r\n        // const peer = new Peer({\r\n        //     host: 'localhost',\r\n        //     port: 9000,\r\n        //     path: '/myapp'\r\n        // });\r\n        const peer = new Peer();\r\n\r\n        //Called when we connect to broker server\r\n        peer.on('open', id =>{\r\n            console.log('connected');\r\n            setUserInfo(val =>{\r\n                return {...val, peerId:id}\r\n            });\r\n        });\r\n\r\n        //Reject incomming connections\r\n        peer.on('connection', conn => {\r\n            console.log(\"rejected\");\r\n            console.log(conn);\r\n            conn.close();\r\n        });\r\n\r\n        setConnection(peer);\r\n\r\n        })()\r\n    }, []);\r\n\r\n    //Get all of the users available devices\r\n    const getSpotifyDevices = ()=>{\r\n        if(!spotify) return null;\r\n\r\n        //clear current devices for a visual effect\r\n        setUserInfo(v => {return {...v, devices:[]}})\r\n\r\n        spotify.getMyDevices()\r\n        .then(devices => setUserInfo(current => {\r\n            const sellectedPlayer = devices.devices.length !== 0 ? 0 : null;\r\n            return {...current, players: devices.devices, sellectedPlayer}\r\n        }))\r\n       .catch(e => console.log(\"Hubo un error:\", e))\r\n    }\r\n\r\n    //Connect and setup connection with host\r\n    const connect = () => {\r\n        const conn = connection.connect(hostId);\r\n    \r\n        conn.on('open', function() {\r\n            console.log('Connected to another peer!!')\r\n            \r\n            setHost(conn);\r\n\r\n            conn.on('data', async (data) => {\r\n                const user = userInfoRef.current;\r\n                console.log('Received', data);\r\n\r\n                setHostSong(data.song);\r\n\r\n                if(user.players.length === 0) return null;\r\n\r\n                const {item, is_playing, progress_ms, device } = await spotify.getMyCurrentPlaybackState()\r\n                \r\n                if(item.uri === data.song.item.uri && device.id === user.players[user.sellectedPlayer]){\r\n                    //if Songs are more than 3 seconds appart we seek to the hosts position\r\n                    if(Math.abs(data.song.progress_ms - progress_ms) > 3*1000)\r\n                        spotify.seek(data.song.progress_ms);\r\n\r\n                    if(data.song.is_playing !== is_playing && is_playing)\r\n                        spotify.pause(user.players[user.sellectedPlayer].id);\r\n                    \r\n                    if(data.song.is_playing !== is_playing && !is_playing)\r\n                        spotify.play({  device_id: user.players[user.sellectedPlayer]  })\r\n\r\n                    return null;\r\n                }\r\n\r\n                spotify.play({\r\n                    device_id:user.players[user.sellectedPlayer].id, \r\n                    uris:[data.song.item.uri],\r\n                    position_ms: progress_ms,\r\n                });     \r\n            });\r\n        });\r\n        conn.on('close', ()=>{\r\n            setHost(false);\r\n        })\r\n    }\r\n\r\n    if(userInfo.spotify && userInfo.peerId && spotify && userInfo.players)\r\n    return (\r\n    <div className=\"App\">\r\n\r\n        <h3>Username: {userInfo.spotify.display_name}</h3>\r\n        \r\n        <br/>\r\n        {!host?\r\n        (<>\r\n        <h3>Connect</h3>\r\n        <input value={hostId} onChange={e => setHostId(e.target.value) }  />\r\n        <button onClick={connect} > Connect </button>\r\n        <br/>\r\n        </>)\r\n        :\r\n        (<p>Connected to: {host.peer} </p>)\r\n        }\r\n\r\n        {hostSong && (\r\n            <div>\r\n                <h2>Hosts song</h2>\r\n                <h4>{hostSong.item.name}</h4>\r\n                <h4>{hostSong.progress_ms/1000}s</h4>\r\n                <h4>{hostSong.is_playing?'playing': 'paused'}</h4>\r\n            </div>\r\n        )}\r\n\r\n        <h3>Players <button onClick={getSpotifyDevices} >refresh</button>  </h3>\r\n        {userInfo.players.length === 0 && (<h4>No connected devices {userInfo.sellectedPlayer} </h4>)}\r\n        <ul>\r\n            {userInfo.players.map(player => (\r\n                <li key={player.id}> {player.name} type:{player.type} </li>\r\n            ))}\r\n        </ul>\r\n\r\n    </div>\r\n    );\r\n    else\r\n    return (<p>...Loading</p>);\r\n}\r\n\r\nexport default User;","import React, {useEffect, useState, useRef} from 'react';\r\nimport Peer from 'peerjs';\r\nimport Spotify from 'spotify-web-api-js';\r\n\r\n\r\nfunction User(props) {\r\n    const [spotify,setSpotify] = useState(false);\r\n\r\n    const [connection, setConnection] =useState(false);\r\n    const [userInfo, setUserInfo] =useState({peerId:null, spotify:null, players:[]});\r\n    \r\n    const [connectedClients, setConnectedClients] = useState({});\r\n    const clientsRef = useRef(connectedClients);\r\n    clientsRef.current = connectedClients;\r\n    const addClient = client => setConnectedClients(list => {\r\n        console.log(\"adding\",client);\r\n        return { ...list, [client.peer]:client };\r\n    });\r\n\r\n    useEffect(() => {\r\n        const s = new Spotify();\r\n        s.setAccessToken(props.credentials.access_token);\r\n        setSpotify(s);\r\n\r\n        //Get all of the users devices\r\n        s.getMyDevices()\r\n        .then(devices => setUserInfo(current => {\r\n            return {...current, players: devices.devices}\r\n        }))\r\n       .catch(e => console.log(\"Hubo un error:\", e))\r\n\r\n        //Get users sportify information\r\n        s.getMe()\r\n        .then(d => setUserInfo( val =>{\r\n            return {...val, spotify : d}\r\n        } ))\r\n        .catch(d => setUserInfo( val =>{\r\n            return {...val, spotify: {display_name:'Not found'} }\r\n        } ));\r\n\r\n        //Connect to broker server\r\n        // const peer = new Peer({\r\n        //     host: 'localhost',\r\n        //     port: 9000,\r\n        //     path: '/myapp'\r\n        // });\r\n        const peer = new Peer();\r\n\r\n        //Called when we connect to broker server\r\n        peer.on('open', id =>{\r\n            console.log('connected');\r\n            setUserInfo(val =>{\r\n                return {...val, peerId:id}\r\n            });\r\n        });\r\n\r\n        //Save incomming connections\r\n        peer.on('connection', conn => {\r\n            console.log(\"Peer connected:\", conn.peer);\r\n\r\n            conn.on('close', () => {\r\n                console.log(\"peer disconnected\");\r\n\r\n                setConnectedClients(clients =>{\r\n                    const {[conn.peer]: removedState, ...newClients} = clients;\r\n                    return newClients;\r\n                })\r\n            });\r\n\r\n            addClient(conn);\r\n        } );\r\n\r\n        setConnection(peer);\r\n\r\n        const interval = setInterval( async () => {\r\n\r\n            const data = await s.getMyCurrentPlaybackState()\r\n            if(!data) return null;\r\n            Object.keys(clientsRef.current).forEach(id => clientsRef.current[id].send({song: data}) )     \r\n\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    if(userInfo.spotify && spotify && userInfo.players)\r\n    return (\r\n    <div className=\"App\">\r\n\r\n        <h3>Username: {userInfo.spotify.display_name}</h3>\r\n        <h3>Host id: {userInfo.peerId}</h3>\r\n        <br/>\r\n\r\n        <h4>Connected Clients:</h4>\r\n        <ul>\r\n            {Object.keys(connectedClients).map(id =>  (\r\n                <li key={id}> {id} </li>\r\n            ))}\r\n        </ul>\r\n    </div>\r\n    );\r\n    else\r\n    return (<p>...Loading</p>);\r\n}\r\n\r\nexport default User;\r\n","import React, {useState} from 'react';\nimport User from './User.js';\nimport Host from './Host';\n\nimport SpotifyLogin from 'react-spotify-login';\n\n\n\nfunction App() {\n    const [credentials, setCredentials] = useState({status:false, credentials:null});\n\n    const [isHost, setIsHost] = useState(false);\n\n    const onSuccess = response => setCredentials({status:true, credentials:response});\n    const onFailure = response => setCredentials({status:false, credentials:false});    \n    //\"streaming,user-read-email,user-read-private,read-playback-state\"\n\n    if(!credentials.status)\n        return (\n            <>\n            <React.StrictMode>\n                <SpotifyLogin clientId={'eff635f26c1c4116bc9cecca8ea22d17'}\n                redirectUri={'https://felipetrost.github.io/spotifySyncPlayback/'}\n                scope={[\"streaming\", \"user-read-email\", \"user-read-private\", \"user-read-playback-state\", \"user-modify-playback-state\"]}\n                onSuccess={onSuccess}\n                onFailure={onFailure}/>\n            </React.StrictMode>\n\n            <br/>\n            <h4>Modalidad:</h4>\n            <input type=\"radio\" id=\"host\" name=\"role\" value=\"host\" checked={isHost} onChange={e=> setIsHost(e.target.checked)} />\n            <label for=\"host\">Host</label><br/>\n\n            <input type=\"radio\" id=\"user\" name=\"role\" value=\"user\" checked={!isHost} onChange={e=> setIsHost(!e.target.checked)} />\n            <label for=\"user\">User</label><br/>\n\n            {credentials.credentials === false && (\n              <h4>Hubo un problema con el inicio de sesion</h4>\n            )}\n            </>\n        )\n\n    else if(credentials.status){\n      if(isHost){\n        return <Host credentials={credentials.credentials} />;\n      }else{\n        return <User credentials={credentials.credentials} />;\n      }\n    }\n\n    else\n        return \"No se pudo\"\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}